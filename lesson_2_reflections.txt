1- What happens when you initialize a repository? Why do you 
need to do that?

When you initialize a repository it creates the structure for 
git to track versions with metadata. You need to do that because 
otherwise git does not have the metadata or file structure with 
which to operate and perform version control.

2- How is the staging area different from the working directory 
and the repository? What value do you think it offers?

The working directory is the directory you are performing 
current changes that have yet to be committed. The repository 
is a collection of previous commits cataloging the changes 
you have made over time. The staging area works as an in-between 
where you load a file or groups of files to commit them to the 
repository as a most recent version.

3- How can you use the staging area to make sure you have one 
commit per logical change?

By using 'git diff' and 'git diff --staged' you can double check
 the changes before committing. This way you can compare on 
an ongoing basis between workgroup and staged, and staged and 
master in the repository.

4- What are some situations when branches would be helpful in 
keeping your history organized? How would branches help?

Some situations are when you are doing experimental features 
which you are not sure you want to incorporate into ongoing 
versions of your game while keeping at least one ongoing for 
regular updating and debugging. Branches allow you to keep 
track of one version where the only element changing is 
your experimental feature, while permitting you to separately 
perform the routine changes.

5- How do the diagrams help you visualize the branch structure?

Diagrams allow you to see which commits and commit IDs 
split from the master to form new branches, while still seeing
every unique branch, including the master. Log does not do 
this in a way that visually intuitive.

6- What is the result of merging two branches together? Why do 
we represent it in the diagram the way we do?

Merging the two branches effectively combined the changes 
from the separate coins branch into the master branch, also
making it the "tip" of the master branch. We represent it 
the way we do in the diagram because it shows how what 
once two separate branches with unique commits, these now 
have merged and now follow one branch of commits but still 
can be traced back through individual branches.

7- What are the pros and cons of Git's automatic merging 
versus always doing merges manually?

The pros of Git's automatic merging is that for more 
pedestrian merging it quickly identifies most of which 
does not conflict and puts it into one document, while 
also identifying conflicts and if more than one person 
is involved, who. The cons are that you might be merging 
redundant, unnecessary, or erroneous code. For a skilled 
coder resolving this conflicts/issues may be intuitive, 
not might not.