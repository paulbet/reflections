1- When would you want to use a remote repository rather than keeping all your work local?

One major reason to use a remote repository is to collaborate with various users on 
a project. This usefulness could be magnified when trying to open source a project 
so that anyone who felt they might make a positive contribution could volunteer a 
commit. A second major reason is to work from projects from various locations/terminals 
without having to physically move around your repository by simply accessing github 
from whichever terminal you need to and have access to the most recent commits.

2- Why might you want to always pull changes manually rather 
than having Git automatically stay up-to-date with your remote 
repository?

You would want to do it manually because if multiple contributors 
are performing commits, you might be working on a version that 
gets pulled. Another issue might be that it does not make sense 
to automatically update if one works from various locations; there 
is not point constantly updating to a terminal throughout the 
when only the final commit being worked on from a different 
location would need to be pulled.

3- Describe the differences between forks, clones, and branches. 
When would you use one instead of another.

Forks are copying someone else's repository on Github to your 
own profile to continue work independently from the original. 
Clones make a full copy of a repository, either on Github or 
on Git in your own repository, or across Git and Github. 
Branches are a separate series of commits based off a master, 
but not copied. You would use fork's when copying a repository 
from Github you would like to work on but do not have 
permission to access. Clone would be when you want to copy 
repositories from Github or within Git. Branches are when 
you want to work on a feature of program without breaking 
your master version and keeping the Master accessible.

4- What is the benefit of having a copy of the last known 
state of the remote stored locally?

Having the last known state of the remote stored locally allows 
you and Git to know what was the last version you were working 
from before working locally. This can enable you to then compare 
where your version started diverging from the last remote commit, 
for example whether it has been altered at all and can be a simple 
push, or if there are more recent remote commits you will have to 
either merge or fast-forward merge.

5- How would you collaborate without using Git or Github? What would 
be easier, and what would be harder?

The two options would be to collaborate manually, but sending files 
back and forth between collaborators, or using a cloud-based sharing 
program. What would be easier would be to have a single working copy 
that is used, and having to just save or save and send. What would be 
harder is just about everything else, such as only one person working 
on it at a time, how to coordinate several people working at the same 
time, how to track branches you may not know about, not knowing which 
file is current, and how to best track commits and merge.